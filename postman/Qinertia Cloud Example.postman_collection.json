{
	"info": {
		"_postman_id": "6fcc8e80-916c-4bc3-8b0b-ea686d8de416",
		"name": "Qinertia Cloud Example",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get organization projects",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				},
				"followOriginalHttpMethod": false,
				"followRedirects": true,
				"followAuthorizationHeader": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/organizations/{{organization_id}}/projects",
					"host": [
						"{{domain}}"
					],
					"path": [
						"organizations",
						"{{organization_id}}",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP1] Create project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { id } = pm.response.json()\r",
							"pm.collectionVariables.set(\"last_created_project\", id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"region\": \"eu-west-3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/organizations/{{organization_id}}/projects",
					"host": [
						"{{domain}}"
					],
					"path": [
						"organizations",
						"{{organization_id}}",
						"projects"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get project",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/projects/{{last_created_project}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"projects",
						"{{last_created_project}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP2] Get project input upload post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Set response data to env\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.collectionVariables.set(\"s3_upload_url\", jsonData.url);\r",
							"    pm.collectionVariables.set(\"s3_upload_bucket\", jsonData.fields.bucket);\r",
							"    pm.collectionVariables.set(\"s3_upload_algo\", jsonData.fields[\"X-Amz-Algorithm\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_credential\", jsonData.fields[\"X-Amz-Credential\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_date\", jsonData.fields[\"X-Amz-Date\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_key\", jsonData.fields.key);\r",
							"    pm.collectionVariables.set(\"s3_upload_policy\", jsonData.fields.Policy);\r",
							"    pm.collectionVariables.set(\"s3_upload_signature\", jsonData.fields[\"X-Amz-Signature\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_security_token\", jsonData.fields[\"X-Amz-Security-Token\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/projects/{{last_created_project}}/input",
					"host": [
						"{{domain}}"
					],
					"path": [
						"projects",
						"{{last_created_project}}",
						"input"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP3.1] Upload file base/sbgs167p.20d",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const filename = \"base/sbgs167p.20d\";\r",
							"const uploadKey = pm.collectionVariables.get(\"s3_upload_key\");\r",
							"const fileKey = uploadKey.replace(\"${filename}\", filename);\r",
							"pm.collectionVariables.set(\"s3_upload_key_file1\", fileKey);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "bucket",
							"value": "{{s3_upload_bucket}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Algorithm",
							"value": "{{s3_upload_algo}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Credential",
							"value": "{{s3_upload_credential}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Date",
							"value": "{{s3_upload_date}}",
							"type": "text"
						},
						{
							"key": "key",
							"value": "{{s3_upload_key_file1}}",
							"type": "text"
						},
						{
							"key": "Policy",
							"value": "{{s3_upload_policy}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Signature",
							"value": "{{s3_upload_signature}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Security-Token",
							"value": "{{s3_upload_security_token}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "qinertia_cloud/demo/base/sbgs167p.20d"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{s3_upload_url}}",
					"host": [
						"{{s3_upload_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP3.2] Upload file rover/Navsight-Auto-Demo.002",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const filename = \"rover/Navsight-Auto-Demo.002\";\r",
							"const uploadKey = pm.collectionVariables.get(\"s3_upload_key\");\r",
							"const fileKey = uploadKey.replace(\"${filename}\", filename);\r",
							"pm.collectionVariables.set(\"s3_upload_key_file2\", fileKey);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "bucket",
							"value": "{{s3_upload_bucket}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Algorithm",
							"value": "{{s3_upload_algo}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Credential",
							"value": "{{s3_upload_credential}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Date",
							"value": "{{s3_upload_date}}",
							"type": "text"
						},
						{
							"key": "key",
							"value": "{{s3_upload_key_file2}}",
							"type": "text"
						},
						{
							"key": "Policy",
							"value": "{{s3_upload_policy}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Signature",
							"value": "{{s3_upload_signature}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Security-Token",
							"value": "{{s3_upload_security_token}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "qinertia_cloud/demo/rover/Navsight-Auto-Demo.002"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{s3_upload_url}}",
					"host": [
						"{{s3_upload_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP3.3] Upload file rover/Navsight-Auto-Demo.json",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const filename = \"rover/Navsight-Auto-Demo.json\";\r",
							"const uploadKey = pm.collectionVariables.get(\"s3_upload_key\");\r",
							"const fileKey = uploadKey.replace(\"${filename}\", filename);\r",
							"pm.collectionVariables.set(\"s3_upload_key_file3\", fileKey);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "bucket",
							"value": "{{s3_upload_bucket}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Algorithm",
							"value": "{{s3_upload_algo}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Credential",
							"value": "{{s3_upload_credential}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Date",
							"value": "{{s3_upload_date}}",
							"type": "text"
						},
						{
							"key": "key",
							"value": "{{s3_upload_key_file3}}",
							"type": "text"
						},
						{
							"key": "Policy",
							"value": "{{s3_upload_policy}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Signature",
							"value": "{{s3_upload_signature}}",
							"type": "text"
						},
						{
							"key": "X-Amz-Security-Token",
							"value": "{{s3_upload_security_token}}",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "qinertia_cloud/demo/rover/Navsight-Auto-Demo.json"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{s3_upload_url}}",
					"host": [
						"{{s3_upload_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get project resource upload post data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Set response data to env\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.collectionVariables.set(\"s3_upload_url\", jsonData.url);\r",
							"    pm.collectionVariables.set(\"s3_upload_bucket\", jsonData.fields.bucket);\r",
							"    pm.collectionVariables.set(\"s3_upload_algo\", jsonData.fields[\"X-Amz-Algorithm\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_credential\", jsonData.fields[\"X-Amz-Credential\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_date\", jsonData.fields[\"X-Amz-Date\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_key\", jsonData.fields.key);\r",
							"    pm.collectionVariables.set(\"s3_upload_policy\", jsonData.fields.Policy);\r",
							"    pm.collectionVariables.set(\"s3_upload_signature\", jsonData.fields[\"X-Amz-Signature\"]);\r",
							"    pm.collectionVariables.set(\"s3_upload_security_token\", jsonData.fields[\"X-Amz-Security-Token\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/projects/{{last_created_project}}/resources",
					"host": [
						"{{domain}}"
					],
					"path": [
						"projects",
						"{{last_created_project}}",
						"resources"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP4] Start processing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const { id } = pm.response.json()\r",
							"pm.collectionVariables.set(\"last_created_processing\", id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"processingJson\": {\r\n        \"version\": \"1.0\",\r\n        \"project\": {\r\n            \"name\":\"Qinertia CLI\",\r\n            \"author\": \"Chuck Berry\",\r\n            \"organization\": \"SBG Systems\",\r\n            \"description\": \"Simple Qinertia CLI project to showcase NAVSIGHT-S with an APOGEE-I tightly coupled post processing.\",\r\n            \"type\":\"sbgECom\",\r\n            \"path\":\"rover/\"\r\n        },\r\n        \"processing\": {\r\n            \"motionProfile\":\"automotive\",\r\n            \"type\":\"insSingle\",\r\n            \"bases\": [\r\n            {\r\n                \"positionMode\": \"published\",\r\n                \"antenna\": {\r\n                \"type\": \"TWIVP6050_CONE  NONE\"\r\n                },\r\n                \"data\": [\r\n                \"base/sbgs167p.20d\"\r\n                ]\r\n            }\r\n            ]\r\n        },\r\n        \"exports\": [\r\n            {\r\n            \"name\":\"Export SBET\",\r\n            \"profile\":\"SBET: 200Hz\",\r\n            \"outputDir\": \"export\"\r\n            },\r\n            {\r\n            \"name\":\"Export ASCII\",\r\n            \"profile\":\"ASCII: INS at 200Hz\",\r\n            \"outputDir\": \"export\"\r\n            }\r\n        ],\r\n        \"reports\": [\r\n            {\r\n            \"name\": \"JSON report\",\r\n            \"template\": \"Minimal JSON\",\r\n            \"outputDir\": \"reports/json\"\r\n            },\r\n            {\r\n            \"name\": \"PDF report\",\r\n            \"template\": \"Full PDF\"\r\n            }\r\n        ]\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/projects/{{last_created_project}}/processings",
					"host": [
						"{{domain}}"
					],
					"path": [
						"projects",
						"{{last_created_project}}",
						"processings"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP5] Get processing (keep pooling until processing is over)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/processings/{{last_created_processing}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"processings",
						"{{last_created_processing}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel processing",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{domain}}/processings/{{last_created_processing}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"processings",
						"{{last_created_processing}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP6] Get project output result",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/projects/{{last_created_project}}/output",
					"host": [
						"{{domain}}"
					],
					"path": [
						"projects",
						"{{last_created_project}}",
						"output"
					]
				}
			},
			"response": []
		},
		{
			"name": "[STEP7] Get processing errors",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/processings/{{last_created_processing}}/errors",
					"host": [
						"{{domain}}"
					],
					"path": [
						"processings",
						"{{last_created_processing}}",
						"errors"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "clientId",
				"value": "api-key",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{access_token_secret}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{access_token_key}}",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{auth_endpoint}}",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "password_credentials",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "redirect_uri",
				"value": "localhost:4202",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "openid",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "body",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "keycloak_access_token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "domain",
			"value": "https://qinertia-api.sbg-systems.com/api/v1"
		},
		{
			"key": "auth_endpoint",
			"value": "https://account.sbg-systems.com/realms/sbg/protocol/openid-connect/token"
		},
		{
			"key": "access_token_key",
			"value": "CHANGE_ME"
		},
		{
			"key": "access_token_secret",
			"value": "CHANGE_ME"
		},
		{
			"key": "organization_id",
			"value": "CHANGE_ME"
		},
		{
			"key": "last_created_project",
			"value": ""
		},
		{
			"key": "last_created_processing",
			"value": ""
		},
		{
			"key": "s3_upload_algo",
			"value": ""
		},
		{
			"key": "s3_upload_bucket",
			"value": ""
		},
		{
			"key": "s3_upload_credential",
			"value": ""
		},
		{
			"key": "s3_upload_date",
			"value": ""
		},
		{
			"key": "s3_upload_key",
			"value": ""
		},
		{
			"key": "s3_upload_policy",
			"value": ""
		},
		{
			"key": "s3_upload_security_token",
			"value": ""
		},
		{
			"key": "s3_upload_signature",
			"value": ""
		},
		{
			"key": "s3_upload_url",
			"value": ""
		},
		{
			"key": "s3_upload_key_file1",
			"value": ""
		},
		{
			"key": "s3_upload_key_file2",
			"value": ""
		},
		{
			"key": "s3_upload_key_file3",
			"value": ""
		}
	]
}